using FactoryServerApi.Http;
using FactoryServerApi.Udp;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http.Headers;
using System.Reflection;

namespace FactoryServerApi;
public static class IServiceCollectionExtensions
{

    public static IServiceCollection AddFactoryServerServices(this IServiceCollection sColl)
    {
        sColl.AddHttpClient("factoryServerHttpClient", hClient =>
            {
                hClient.DefaultRequestHeaders.Accept.Clear();
                hClient.DefaultRequestHeaders.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("*/*"));
                hClient.DefaultRequestHeaders.UserAgent.Clear();
                hClient.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("factoryServerApi", Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? "0.0"));
            })
            //delete this if the server has SSL well configured and is not using autogenerated certs
            .ConfigurePrimaryHttpMessageHandler((handlers, sProv) =>
            {
                var authHandler = new HttpClientHandler
                {
                    ClientCertificateOptions = ClientCertificateOption.Manual,

                    ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => true
                };

            });
        sColl.AddKeyedSingleton("factoryServerSystemTime", TimeProvider.System)
            .AddSingleton<IFactoryServerUdpClientFactory, FactoryServerUdpClientFactory>()
            .AddTransient<IFactoryServerHttpService, FactoryServerHttpService>();
        return sColl;
    }

}
